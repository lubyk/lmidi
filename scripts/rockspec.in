{% -- DEFAULT TEMPLATE FOR MODULE WITH C++. Original in lub project. %}
{% 
local lfs = require 'lfs'
local lub = require 'lub'
%}
package = "{{lib.type}}"
version = "{{lib.VERSION}}-1"
source = {
  url = 'https://github.com/lubyk/{{lib.type}}/archive/REL-{{lib.VERSION}}.tar.gz',
  dir = '{{lib.type}}-REL-{{lib.VERSION}}',
}
description = {
  summary = "{{def.description.summary}}",
  detailed = [[
{{def.description.detailed}}]],
  homepage = "{{def.description.homepage}}",
  license = "{{def.description.license}}"
}

dependencies = {
{% for _, v in ipairs(lib.DEPENDS) do %}
  "{{v}}",
{% end %}
}
build = {
  type = 'builtin',
  modules = {
    -- Plain Lua files
    {{string.format("[%-17s] = '%s/%s.lua'", "'"..lib.type.."'", lib.type, 'init')}},
{% for file in lfs.dir(lib.type) do %}
{% if file ~= 'init.lua' and file:match('.lua$') then file = file:sub(1, -5) %}
    {{string.format("[%-17s] = '%s/%s.lua'", "'"..lib.type..'.'..file.."'", lib.type, file)}},
{% end %}
{% end %}
{% if not def.pure_lua then
  sources_count = 0
  %}
    -- C module
    {{string.format("[%-17s] = ", "'"..lib.type..".core'")}}{
      sources = {
{% for path in lub.Dir('src'):glob('%.c',0) do
  sources_count = sources_count + 1 %}
        '{{path}}',
{% end %}
{% for path in lub.Dir('src/bind'):glob '%.c' do
  sources_count = sources_count + 1 %}
        '{{path}}',
{% end %}
      },
{% if def.includes and #def.includes > 0 then %}
      incdirs   = {'{{ lub.join(def.includes, "', '") }}'},
{% end %}
{% if def.libraries and #def.libraries > 0 then %}
      libraries = {'{{ lub.join(def.libraries, "', '") }}'},
{% end %}
    },
{% end %}
  },
{% if lub.exist(lib.type..'/assets') then %}
  install = {
    -- Assets needed by library.
    lua = {
{% for path in lub.Dir(lib.type..'/assets'):glob() do %}
      {{string.format("[%-32s] = '%s'", "'"..string.gsub(string.gsub(path, '%.', '_'), '/', '.').."'", path)}},
{% end %}
    },
  },
{% end %}
{% if not def.pure_lua and #def.platspec > 0 then %}
  platforms = {
{% for _, plat in ipairs(def.platspec) do 
  idx = sources_count
%}
    {{plat}} = {
      modules = {
        ['{{lib.type}}.core'] = {
{% if lub.exist('src/'..plat) then %}
          sources = {
{% for path in lub.Dir('src/'..plat):glob '%.c' do 
idx = idx + 1 %}
            [{{idx}}] = '{{path}}',
{% end %}
{% for path in lub.Dir('src/'..plat):glob '%.m' do
idx = idx + 1 %}
            [{{idx}}] = '{{path}}',
{% end %}
          },
{% end %}
{% if def.platlibs[plat] then %}
          libraries = {'{{ lub.join(def.platlibs[plat], "', '") }}'},
{% end %}
        },
      },
    },
{% end %}
  },
{% end %}
}

